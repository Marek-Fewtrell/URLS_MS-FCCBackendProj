 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

var MongoClient = require('mongodb').MongoClient;
var url = 'mongodb://localhost:27017/urlData';

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });

app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    });


//Handles shortened URL access.
app.route('/:input')
    .get(function(req, res) {
      //check for valid shortcut url.
      //if valid, redirect to it.
      MongoClient.connect(url, function(err, db) {
        if (err) {
          console.log('Unable to connect to the mongoDB server. Error: '. err);
        } else {
          console.log("Connection establsihed to database.");
          console.log(req.params.input);
          var query = {"shortened_Id": req.params.input};
          db.collection("url").find(query).toArray(function(err, result) {
            if (err) throw err;
            if (result.length != 1) {
              console.log(result);
              console.log("Doesn't exist.");
            } else {
              console.log("Existing URL found. Redirecting now.");
              //console.log(result);
              res.redirect(result[0].original_Url);
              //res.type("text").send("Existing Found, " + result[0].original_Url);
            }
            db.close();
          });
        }
      });
  });


/*
Original way, doesn't work as the promises aren't done sequentially.
app.route('/new/*')
    .get(function(req, res) {
      var tempReturnObj = {"original_url": req.params[0]};
      //res.send();
      //If valid URL.
      if (checkValidURL(req.params[0])) {
        //return short url.

        MongoClient.connect(url, function(err, db) {
          if (err) {
            console.log('Unable to connect to the mongoDB server. Error: '. err);
          } else {
            console.log("Connection establsihed to database.");
            var query = {original_Url: req.params[0]};
            db.collection("url").find(query).toArray(function(err, result) {
              if (err) throw err;
              //console.log(result.length);
              if (result.length != 1) {
                console.log("Create new.");
                var shortenedUrlId = 1;
                var newObj = {'shortened_Id': shortenedUrlId, 'original_Url': req.params[0]};
                db.collection("url").insertOne(newObj, function(err, res) {
                  if (err) throw err;
                  console.log("added new item");
                  tempReturnObj['shortened_url'] = shortenedUrlId;
                });
              } else {
                //console.log("Existing URL found.");
                //console.log(result);
                tempReturnObj['shortened_url'] = result[0]['shortened_Id'];
              }
              db.close();
              res.send(tempReturnObj);
            });
          }
        });
      } else {
        //return error
        tempReturnObj["error"] = "Problem with URL. Not Valid.";
        res.send(tempReturnObj);
      }

  });*/

//Creates a new shortneded URL.
  app.route('/new/*')
      .get(function(req, res) {
        var tempReturnObj = {"original_url": req.params[0]};
        //res.send();
        //If valid URL.
        if (checkValidURL(req.params[0])) {
          //return short url.
          MongoClient.connect(url, function(err, db) {
            if (err) {
              console.log('Unable to connect to the mongoDB server. Error: '. err);
            } else {
              console.log("Connection establsihed to database.");

              handleOperationsAsync(req.params[0], tempReturnObj, db ).then(function(data) {
                console.log("closed connection");
                db.close();
                res.send(tempReturnObj);
              });
            }
          });

        } else {
          //return error
          tempReturnObj["error"] = "Problem with URL. Not Valid.";
          res.send(tempReturnObj);
        }

    });

/*
  Handles the checking for an existing item. If it doesn't exists, creates one. else shows the current one.
*/
function handleOperationsAsync(validURL, tempReturnObj, db) {
  return new Promise(function(resolve, reject) {

    var query = {original_Url: validURL};
    db.collection("url").find(query).toArray(function(err, result) {
      if (err) throw err;
      //console.log(result.length);
      if (result.length != 1) {
        var shortenedUrlId = "1";
        var newObj = {'shortened_Id': shortenedUrlId, 'original_Url': validURL};
        console.log("Create new.");
        handleOperationsAsync2(db, newObj).then(function(data) {
          tempReturnObj['shortened_url'] = shortenedUrlId;
          resolve(tempReturnObj);
        });

      } else {
        tempReturnObj['shortened_url'] = result[0]['shortened_Id'];
        console.log("Existing URL found.");
        resolve(tempReturnObj);
      }
    });


  });
}

/*
  Handles the creatation of a new item.
*/
function handleOperationsAsync2(db, newObj) {
  return new Promise(function(resolve, reject) {

    db.collection("url").insertOne(newObj, function(err, res) {
      if (err) throw err;
      console.log("added new item");
      resolve();
    });

  });
}


// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }
})

//For when launched on Glitch.com
if (process.env.PORT != null) {
  app.listen(process.env.PORT, function () {
    console.log('Node.js listening ...');
  });
} else {
  //Set port here.
  app.listen(23200, function () {
    console.log('Node.js listening ...');
  });
}
